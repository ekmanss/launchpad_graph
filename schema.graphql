type Status @entity {
    id: ID!
    totalSwapUser: BigInt!
}

type User @entity {
    id: ID!
    address: String!
}

type Holder @entity {
    id: ID!
    userAddress: String!
    tokenAddress: String!
    balance: BigInt!
    balance_formatted: BigDecimal
    ratio: BigDecimal!
}

type Token @entity {
    id: ID!
    address: String!
    name: String!
    symbol: String!
    decimals: BigInt!
    tokenKey: String!
    userCount: BigInt!
    createdAtTimestamp: BigInt!
    createdOrigin: Bytes!
    tokenInfo: TokenInfo!
    launchPoolInfo: TokenLaunchPoolInfo
    holder: [Holder!]!
}

type TokenLaunchPoolInfo @entity {
    id: ID!
    pool: Pool!
    isToken0: Boolean!
}

type TokenInfo @entity {
    id: ID!
    name: String!
    symbol: String!
    decimal: BigInt!
    totalSupply: BigInt!
}

type Pool @entity {
    # pool address
    id: ID!
    token0: Token!
    # token1
    token1: Token!
}

type Swap @entity {
    # transaction hash + "#" + index in swaps Transaction array
    id: ID!
    # pointer to transaction
    type: BigInt!
    transaction: String!
    # timestamp of transaction
    timestamp: BigInt!
    # pool swap occured within
    pool: String!
    # allow indexing by tokens
    token0: Token!
    # allow indexing by tokens
    token1: Token!
    # sender of the swap
    sender: Bytes!
    # recipient of the swap
    recipient: Bytes!
    # txn origin
    origin: Bytes! # the EOA that initiated the txn
    # delta of token0 swapped
    amount0: BigDecimal!
    # delta of token1 swapped
    amount1: BigDecimal!
}